import Ember from 'ember';
import DS from 'ember-data';
import ApplicationAdapter from '../adapters/application';
import config from '../config/environment';
var Config = config.APP;



export default Ember.ObjectController.extend({

	needs: ['facebook'],
	
	email: null,
	password: null,
	client_token: Config.Server.CLIENT_TOKEN,
	host: Config.Server.USER_SERVER_HOST,
	 
	currentUserId: null,
	isProcessing: false, 
	attemptedTransition: null, 
 

	authenticateByFB: function() {
		var _this = this;
		var facebookController = this.get('controllers.facebook');
		var data = {fb_user_id: facebookController.get('userID'), fb_token: facebookController.get('accessToken')};
		return Ember.$.ajax({
				url: _this.get('host') + '/auth/facebook',
				type: 'post',
				data: data,
				headers: {
					Authorization: 'Bearer client_' + _this.get('client_token')
				},
				dataType: 'json'
		}).then(

			function(response) { 
				//Auth Controller:  
				return _this.setupUser(response);
			}, 

			//ERROR HANDLE
			function(error) {
				return error;
			}
		);
	},
		

	/**
		The user is now authenticated.
		Check that the user has set a username.  
			If not present user with the form to create a username.
			Otherwise, send the user to the route to which they want to go.
	**/	
	setupUser: function(response) {
							
		this.set('isProcessing', false);

		var _this = this;
		var accessToken = response.data[0].token_id;
		var refreshToken =response.data[1].token_id; 
		var currentUserId = response.data[0].user_id;  

		//Reopen the adapters
		DS.RESTAdapter.reopen({
		  headers: { 
		    "Authorization": "Bearer " + accessToken
		  }
		});

		ApplicationAdapter.reopen({
			'loginToken': accessToken
		});

		//SAVE SESSION
		return _this.get('session').authenticate('authenticator:custom', 
			{
				'userId':currentUserId, 
				'accessToken':accessToken, 
				'refreshToken':refreshToken 
			}
		).then(function(){

			_this.send('closeModal');
			
			//Now get the user:
			return _this.store.find('user', currentUserId).then( 
				function(user) {
					console.log("USER", user);

					_this.get('session').set('currentUser', user);

					console.log("SET IT!");

					if( !Ember.isEmpty(user.get('username')) ){
						var attemptedTrans = _this.get('attemptedTransition'); 
						if(Ember.isEmpty(attemptedTrans)){  
							_this.transitionToRoute("seller", user.get('username')  );
						}else{
							_this.transitionToRoute(attemptedTrans);
						}
					} else {
						return _this.transitionToRoute("signup.username");
					}
				}
			);

		}, function(error) {
			return error;
		});
	},

	
	// /**
	// 	User Complete and Authenticated.  Now send them on their way.
	// **/
	// rerouteUser: function(){
	// 	var _this = this;
	// 	var currentUserId = this.get('currentUserId');

	// 	//Does user have a FEED (aka store, aka collection)?
	// 	return _this.store.find('user-collection', currentUserId)
	// 	.then(function(result){

	// 		console.log("FEED", result);

	// 		var collection_id = result.get('collection_id');

	// 		if( Ember.isEmpty(collection_id) ){

	// 			console.log("MAKE THE COLLECTION");

	// 			//Setup collection aka feed
	// 			var data = {
	// 				name: user.get('name'),
	// 				description: ' ',
	// 				user_id: currentUserId
	// 			}
	// 			var feed = _this.store.createRecord('collection', data);
				
	// 			return feed.save()

	// 				.then(function(record){
	// 					user.set('collection', record);
	// 					console.log("SAVED", record.get('id'))
	// 					return record.get('id');
	// 				})
	// 				.then(function(collection_id){
	// 					return _this.store.find('collection', collection_id)
						
	// 				})
	// 				.then(function(collection){
	// 					console.log('GOT COLLECTION', collection);
	// 					return _this.store.find('user-collection', currentUserId)
						
	// 				})
	// 				.then(function(record){
	// 					console.log("TRY RELOAD ", record);
	// 					return record.reload();
	// 				})
	// 				.then(function(record) {
	// 					console.log("GOT COLLECTION LIST" , record);
	// 					return record.get('collection_id');
	// 				});

	// 		}else{
				
	// 			return _this.store.find('user-collection', currentUserId)
	// 			.then(function(record) {
	// 				console.log("WHAT IS THIS? " , record);
	// 				return collection_id;
	// 			});
			
	// 		}
	// 	})

	// 	.then(function(collection_id){
	// 		return _this.store.find('collection', collection_id)
	// 		.then(function(record) {
	// 			return record;
	// 		});
	// 	})

	// 	.then(function(collection) {

	// 		//Save session.
	// 		return _this.get('session').authenticate('authenticator:custom', 
	// 			{
	// 				'userId':currentUserId, 
	// 				'accessToken':accessToken, 
	// 				'refreshToken':refreshToken 
	// 			}
	// 		).then(function(){

	// 			_this.send('closeModal');
				
	// 			var attemptedTrans = _this.get('attemptedTransition'); 
	// 			if(Ember.isEmpty(attemptedTrans)){  
	// 				_this.transitionToRoute("seller", collection.get('slug')  );
	// 			}else{
	// 				_this.transitionToRoute(attemptedTrans);
	// 			}
	// 		}, function(error) {
	// 			return error;
	// 		});
	// 	});

		 
	// } 
});